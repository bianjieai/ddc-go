// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ddc/ddc.proto

package ddc

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Role int32

const (
	Role_OPERATOR         Role = 0
	Role_PLATFORM_MANAGER Role = 1
	Role_CONSUMER         Role = 2
)

var Role_name = map[int32]string{
	0: "OPERATOR",
	1: "PLATFORM_MANAGER",
	2: "CONSUMER",
}

var Role_value = map[string]int32{
	"OPERATOR":         0,
	"PLATFORM_MANAGER": 1,
	"CONSUMER":         2,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}

func (Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_50c82a92a299522c, []int{0}
}

type State int32

const (
	State_FROZEN State = 0
	State_ACTIVE State = 1
)

var State_name = map[int32]string{
	0: "FROZEN",
	1: "ACTIVE",
}

var State_value = map[string]int32{
	"FROZEN": 0,
	"ACTIVE": 1,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_50c82a92a299522c, []int{1}
}

type Function int32

const (
	Function_MINT            Function = 0
	Function_EDIT            Function = 1
	Function_BURN            Function = 2
	Function_TRANSFER        Function = 3
	Function_DDC_APPROVE     Function = 4
	Function_ACCOUNT_APPROVE Function = 5
	Function_FREEZE          Function = 6
	Function_UNFREEZE        Function = 7
	Function_BATCH_BURN      Function = 8
	Function_BATCH_TRANSFER  Function = 9
)

var Function_name = map[int32]string{
	0: "MINT",
	1: "EDIT",
	2: "BURN",
	3: "TRANSFER",
	4: "DDC_APPROVE",
	5: "ACCOUNT_APPROVE",
	6: "FREEZE",
	7: "UNFREEZE",
	8: "BATCH_BURN",
	9: "BATCH_TRANSFER",
}

var Function_value = map[string]int32{
	"MINT":            0,
	"EDIT":            1,
	"BURN":            2,
	"TRANSFER":        3,
	"DDC_APPROVE":     4,
	"ACCOUNT_APPROVE": 5,
	"FREEZE":          6,
	"UNFREEZE":        7,
	"BATCH_BURN":      8,
	"BATCH_TRANSFER":  9,
}

func (x Function) String() string {
	return proto.EnumName(Function_name, int32(x))
}

func (Function) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_50c82a92a299522c, []int{2}
}

type Protocol int32

const (
	Protocol_NFT Protocol = 0
	Protocol_MT  Protocol = 1
)

var Protocol_name = map[int32]string{
	0: "NFT",
	1: "MT",
}

var Protocol_value = map[string]int32{
	"NFT": 0,
	"MT":  1,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}

func (Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_50c82a92a299522c, []int{3}
}

type AccountInfo struct {
	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	DID           string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Role          Role   `protobuf:"varint,4,opt,name=role,proto3,enum=bianjieai.ddc.Role" json:"role,omitempty"`
	leaderDID     string `protobuf:"bytes,5,opt,name=leader_did,json=leaderDid,proto3" json:"leader_did,omitempty"`
	PlatformState State  `protobuf:"varint,6,opt,name=platform_state,json=platformState,proto3,enum=bianjieai.ddc.State" json:"platform_state,omitempty"`
	OperatorState State  `protobuf:"varint,7,opt,name=operator_state,json=operatorState,proto3,enum=bianjieai.ddc.State" json:"operator_state,omitempty"`
}

func (m *AccountInfo) Reset()         { *m = AccountInfo{} }
func (m *AccountInfo) String() string { return proto.CompactTextString(m) }
func (*AccountInfo) ProtoMessage()    {}
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_50c82a92a299522c, []int{0}
}
func (m *AccountInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountInfo.Merge(m, src)
}
func (m *AccountInfo) XXX_Size() int {
	return m.Size()
}
func (m *AccountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AccountInfo proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("bianjieai.ddc.Role", Role_name, Role_value)
	proto.RegisterEnum("bianjieai.ddc.State", State_name, State_value)
	proto.RegisterEnum("bianjieai.ddc.Function", Function_name, Function_value)
	proto.RegisterEnum("bianjieai.ddc.Protocol", Protocol_name, Protocol_value)
	proto.RegisterType((*AccountInfo)(nil), "bianjieai.ddc.AccountInfo")
}

func init() { proto.RegisterFile("ddc/ddc.proto", fileDescriptor_50c82a92a299522c) }

var fileDescriptor_50c82a92a299522c = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4d, 0x8f, 0xd2, 0x40,
	0x18, 0xee, 0x40, 0x97, 0x8f, 0x77, 0x85, 0x9d, 0xcc, 0x72, 0xa8, 0x9a, 0x94, 0x8d, 0x17, 0x37,
	0x44, 0x21, 0xd1, 0x8b, 0x89, 0xf1, 0x30, 0x94, 0x41, 0x49, 0xa4, 0x25, 0x43, 0xd9, 0x03, 0x17,
	0x52, 0x3a, 0x5d, 0xac, 0x81, 0x0e, 0x29, 0xe5, 0x7f, 0x78, 0xf6, 0x0f, 0xf8, 0x57, 0xf6, 0xb8,
	0x47, 0x4f, 0x1b, 0x2d, 0x7f, 0xc4, 0xcc, 0x74, 0x21, 0xd1, 0x83, 0xa7, 0x3e, 0xcf, 0x3b, 0xcf,
	0xc7, 0x9b, 0xe6, 0x85, 0x86, 0x10, 0x61, 0x4f, 0x88, 0xb0, 0xbb, 0x4d, 0x65, 0x26, 0x49, 0x63,
	0x19, 0x07, 0xc9, 0xd7, 0x38, 0x0a, 0xe2, 0xae, 0x10, 0xe1, 0xb3, 0xd6, 0x4a, 0xae, 0xa4, 0x7e,
	0xe9, 0x29, 0x54, 0x88, 0x5e, 0xfc, 0x28, 0xc1, 0x39, 0x0d, 0x43, 0xb9, 0x4f, 0xb2, 0x51, 0x72,
	0x2b, 0x89, 0x05, 0xd5, 0x40, 0x88, 0x34, 0xda, 0xed, 0x2c, 0x74, 0x85, 0xae, 0xeb, 0xfc, 0x48,
	0xc9, 0x53, 0x28, 0x8b, 0x58, 0x58, 0x25, 0x35, 0xed, 0x57, 0xf3, 0x87, 0x76, 0x79, 0x30, 0x1a,
	0x70, 0x35, 0x23, 0x04, 0xcc, 0x24, 0xd8, 0x44, 0x56, 0x59, 0x3b, 0x34, 0x26, 0x2f, 0xc1, 0x4c,
	0xe5, 0x3a, 0xb2, 0xcc, 0x2b, 0x74, 0xdd, 0x7c, 0x73, 0xd9, 0xfd, 0x6b, 0x99, 0x2e, 0x97, 0xeb,
	0x88, 0x6b, 0x01, 0x79, 0x05, 0xb0, 0x8e, 0x02, 0x11, 0xa5, 0x0b, 0x15, 0x7f, 0xa6, 0xe3, 0x1b,
	0xf9, 0x43, 0xbb, 0x5e, 0x4c, 0x55, 0xc9, 0x11, 0xc6, 0x82, 0xbc, 0x87, 0xe6, 0x76, 0x1d, 0x64,
	0xb7, 0x32, 0xdd, 0x2c, 0x76, 0x59, 0x90, 0x45, 0x56, 0x45, 0x17, 0xb4, 0xfe, 0x29, 0x98, 0xaa,
	0x37, 0xde, 0x38, 0x6a, 0x35, 0x55, 0x66, 0xb9, 0x8d, 0xd2, 0x20, 0x93, 0xe9, 0xa3, 0xb9, 0xfa,
	0x3f, 0xf3, 0x51, 0xab, 0x69, 0xe7, 0x1d, 0x98, 0x6a, 0x6b, 0xf2, 0x04, 0x6a, 0xde, 0x84, 0x71,
	0xea, 0x7b, 0x1c, 0x1b, 0xa4, 0x05, 0x78, 0xf2, 0x99, 0xfa, 0x43, 0x8f, 0x8f, 0x17, 0x63, 0xea,
	0xd2, 0x8f, 0x8c, 0x63, 0xa4, 0x34, 0x8e, 0xe7, 0x4e, 0x67, 0x63, 0xc6, 0x71, 0xa9, 0xd3, 0x86,
	0xb3, 0xa2, 0x1f, 0xa0, 0x32, 0xe4, 0xde, 0x9c, 0xb9, 0xd8, 0x50, 0x98, 0x3a, 0xfe, 0xe8, 0x86,
	0x61, 0xd4, 0xf9, 0x8e, 0xa0, 0x36, 0xdc, 0x27, 0x61, 0x16, 0xcb, 0x84, 0xd4, 0xc0, 0x1c, 0x8f,
	0x5c, 0x1f, 0x1b, 0x0a, 0xb1, 0xc1, 0xc8, 0xc7, 0x48, 0xa1, 0xfe, 0x8c, 0xbb, 0xb8, 0xa4, 0x92,
	0x7d, 0x4e, 0xdd, 0xe9, 0x90, 0x71, 0x5c, 0x26, 0x17, 0x70, 0x3e, 0x18, 0x38, 0x0b, 0x3a, 0x99,
	0x70, 0xef, 0x86, 0x61, 0x93, 0x5c, 0xc2, 0x05, 0x75, 0x1c, 0x6f, 0xe6, 0xfa, 0xa7, 0xe1, 0x59,
	0x51, 0xcb, 0xd8, 0x9c, 0xe1, 0x8a, 0xf2, 0xcf, 0xdc, 0x47, 0x56, 0x25, 0x4d, 0x80, 0x3e, 0xf5,
	0x9d, 0x4f, 0x0b, 0x9d, 0x5e, 0x23, 0x04, 0x9a, 0x05, 0x3f, 0x75, 0xd4, 0x3b, 0xcf, 0xa1, 0x36,
	0x51, 0xa7, 0x12, 0xca, 0x35, 0xa9, 0x42, 0xd9, 0x1d, 0xaa, 0xd5, 0x2a, 0x50, 0x1a, 0xfb, 0x18,
	0xf5, 0x3f, 0xdc, 0xfd, 0xb6, 0x8d, 0xbb, 0xdc, 0x46, 0xf7, 0xb9, 0x8d, 0x7e, 0xe5, 0x36, 0xfa,
	0x76, 0xb0, 0x8d, 0xfb, 0x83, 0x6d, 0xfc, 0x3c, 0xd8, 0xc6, 0xbc, 0xbd, 0x8a, 0xb3, 0x2f, 0xfb,
	0x65, 0x37, 0x94, 0x9b, 0xde, 0xe9, 0x0f, 0xab, 0x0b, 0x7d, 0xbd, 0x92, 0xea, 0xb3, 0xac, 0xe8,
	0x23, 0x7c, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0x77, 0xad, 0xaf, 0x05, 0xba, 0x02, 0x00, 0x00,
}

func (m *AccountInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatorState != 0 {
		i = encodeVarintDdc(dAtA, i, uint64(m.OperatorState))
		i--
		dAtA[i] = 0x38
	}
	if m.PlatformState != 0 {
		i = encodeVarintDdc(dAtA, i, uint64(m.PlatformState))
		i--
		dAtA[i] = 0x30
	}
	if len(m.leaderDID) > 0 {
		i -= len(m.leaderDID)
		copy(dAtA[i:], m.leaderDID)
		i = encodeVarintDdc(dAtA, i, uint64(len(m.leaderDID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Role != 0 {
		i = encodeVarintDdc(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDdc(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DID) > 0 {
		i -= len(m.DID)
		copy(dAtA[i:], m.DID)
		i = encodeVarintDdc(dAtA, i, uint64(len(m.DID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintDdc(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDdc(dAtA []byte, offset int, v uint64) int {
	offset -= sovDdc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccountInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDdc(uint64(l))
	}
	l = len(m.DID)
	if l > 0 {
		n += 1 + l + sovDdc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDdc(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovDdc(uint64(m.Role))
	}
	l = len(m.leaderDID)
	if l > 0 {
		n += 1 + l + sovDdc(uint64(l))
	}
	if m.PlatformState != 0 {
		n += 1 + sovDdc(uint64(m.PlatformState))
	}
	if m.OperatorState != 0 {
		n += 1 + sovDdc(uint64(m.OperatorState))
	}
	return n
}

func sovDdc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDdc(x uint64) (n int) {
	return sovDdc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDdc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDdc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDdc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDdc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDdc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDdc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDdc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDdc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDdc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDdc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDdc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field leaderDID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDdc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDdc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDdc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.leaderDID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformState", wireType)
			}
			m.PlatformState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDdc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatformState |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorState", wireType)
			}
			m.OperatorState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDdc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorState |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDdc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDdc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDdc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDdc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDdc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDdc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDdc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDdc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDdc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDdc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDdc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDdc = fmt.Errorf("proto: unexpected end of group")
)
