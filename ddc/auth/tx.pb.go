// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ddc/auth/tx.proto

package auth

import (
	context "context"
	fmt "fmt"
	ddc "github.com/bianjieai/ddc-go/ddc"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgAddAccount defines the Msg/AddAccount request type.
type MsgAddAccount struct {
	Address   string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Did       string   `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	Name      string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Role      ddc.Role `protobuf:"varint,4,opt,name=role,proto3,enum=bianjieai.ddc.Role" json:"role,omitempty"`
	LeaderDID string   `protobuf:"bytes,5,opt,name=leader_did,json=leaderDid,proto3" json:"leader_did,omitempty"`
	Sender    string   `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgAddAccount) Reset()         { *m = MsgAddAccount{} }
func (m *MsgAddAccount) String() string { return proto.CompactTextString(m) }
func (*MsgAddAccount) ProtoMessage()    {}
func (*MsgAddAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca54b1c07b1b0571, []int{0}
}
func (m *MsgAddAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAccount.Merge(m, src)
}
func (m *MsgAddAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAccount proto.InternalMessageInfo

// MsgAddAccountResponse defines the Msg/AddAccount response type.
type MsgAddAccountResponse struct {
}

func (m *MsgAddAccountResponse) Reset()         { *m = MsgAddAccountResponse{} }
func (m *MsgAddAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddAccountResponse) ProtoMessage()    {}
func (*MsgAddAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca54b1c07b1b0571, []int{1}
}
func (m *MsgAddAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAccountResponse.Merge(m, src)
}
func (m *MsgAddAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAccountResponse proto.InternalMessageInfo

// MsgAddBatchAccount defines the Msg/MsgAddBatchAccount request type.
type MsgAddBatchAccount struct {
	Address   []string   `protobuf:"bytes,1,rep,name=address,proto3" json:"address,omitempty"`
	Did       []string   `protobuf:"bytes,2,rep,name=did,proto3" json:"did,omitempty"`
	Name      []string   `protobuf:"bytes,3,rep,name=name,proto3" json:"name,omitempty"`
	Role      []ddc.Role `protobuf:"varint,4,rep,packed,name=role,proto3,enum=bianjieai.ddc.Role" json:"role,omitempty"`
	LeaderDID string     `protobuf:"bytes,5,opt,name=leader_did,json=leaderDid,proto3" json:"leader_did,omitempty"`
	Sender    string     `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgAddBatchAccount) Reset()         { *m = MsgAddBatchAccount{} }
func (m *MsgAddBatchAccount) String() string { return proto.CompactTextString(m) }
func (*MsgAddBatchAccount) ProtoMessage()    {}
func (*MsgAddBatchAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca54b1c07b1b0571, []int{2}
}
func (m *MsgAddBatchAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddBatchAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddBatchAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddBatchAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddBatchAccount.Merge(m, src)
}
func (m *MsgAddBatchAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddBatchAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddBatchAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddBatchAccount proto.InternalMessageInfo

// MsgAddBatchAccountResponse defines the Msg/MsgAddBatchAccount response type.
type MsgAddBatchAccountResponse struct {
}

func (m *MsgAddBatchAccountResponse) Reset()         { *m = MsgAddBatchAccountResponse{} }
func (m *MsgAddBatchAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddBatchAccountResponse) ProtoMessage()    {}
func (*MsgAddBatchAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca54b1c07b1b0571, []int{3}
}
func (m *MsgAddBatchAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddBatchAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddBatchAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddBatchAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddBatchAccountResponse.Merge(m, src)
}
func (m *MsgAddBatchAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddBatchAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddBatchAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddBatchAccountResponse proto.InternalMessageInfo

// MsgUpdateAccountState defines the Msg/UpdateAccountState request type.
type MsgUpdateAccountState struct {
	Address             string    `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	State               ddc.State `protobuf:"varint,2,opt,name=state,proto3,enum=bianjieai.ddc.State" json:"state,omitempty"`
	ChangePlatformState bool      `protobuf:"varint,3,opt,name=change_platform_state,json=changePlatformState,proto3" json:"change_platform_state,omitempty"`
	Sender              string    `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgUpdateAccountState) Reset()         { *m = MsgUpdateAccountState{} }
func (m *MsgUpdateAccountState) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAccountState) ProtoMessage()    {}
func (*MsgUpdateAccountState) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca54b1c07b1b0571, []int{4}
}
func (m *MsgUpdateAccountState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAccountState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAccountState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAccountState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAccountState.Merge(m, src)
}
func (m *MsgUpdateAccountState) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAccountState) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAccountState.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAccountState proto.InternalMessageInfo

// MsgAddBatchAccountResponse defines the Msg/UpdateAccountState response type.
type MsgUpdateAccountStateResponse struct {
}

func (m *MsgUpdateAccountStateResponse) Reset()         { *m = MsgUpdateAccountStateResponse{} }
func (m *MsgUpdateAccountStateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAccountStateResponse) ProtoMessage()    {}
func (*MsgUpdateAccountStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca54b1c07b1b0571, []int{5}
}
func (m *MsgUpdateAccountStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAccountStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAccountStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAccountStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAccountStateResponse.Merge(m, src)
}
func (m *MsgUpdateAccountStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAccountStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAccountStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAccountStateResponse proto.InternalMessageInfo

// MsgDeleteAccount defines the Msg/DeleteAccount request type.
type MsgDeleteAccount struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Sender  string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgDeleteAccount) Reset()         { *m = MsgDeleteAccount{} }
func (m *MsgDeleteAccount) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteAccount) ProtoMessage()    {}
func (*MsgDeleteAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca54b1c07b1b0571, []int{6}
}
func (m *MsgDeleteAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteAccount.Merge(m, src)
}
func (m *MsgDeleteAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteAccount proto.InternalMessageInfo

// MsgDeleteAccountResponse defines the Msg/DeleteAccount response type.
type MsgDeleteAccountResponse struct {
}

func (m *MsgDeleteAccountResponse) Reset()         { *m = MsgDeleteAccountResponse{} }
func (m *MsgDeleteAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteAccountResponse) ProtoMessage()    {}
func (*MsgDeleteAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca54b1c07b1b0571, []int{7}
}
func (m *MsgDeleteAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteAccountResponse.Merge(m, src)
}
func (m *MsgDeleteAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteAccountResponse proto.InternalMessageInfo

// MsgAddFunction defines the Msg/AddFunction request type.
type MsgAddFunction struct {
	Role     ddc.Role     `protobuf:"varint,1,opt,name=role,proto3,enum=bianjieai.ddc.Role" json:"role,omitempty"`
	Protocol ddc.Protocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=bianjieai.ddc.Protocol" json:"protocol,omitempty"`
	Denom    string       `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Function ddc.Function `protobuf:"varint,4,opt,name=function,proto3,enum=bianjieai.ddc.Function" json:"function,omitempty"`
	Operator string       `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *MsgAddFunction) Reset()         { *m = MsgAddFunction{} }
func (m *MsgAddFunction) String() string { return proto.CompactTextString(m) }
func (*MsgAddFunction) ProtoMessage()    {}
func (*MsgAddFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca54b1c07b1b0571, []int{8}
}
func (m *MsgAddFunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddFunction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddFunction.Merge(m, src)
}
func (m *MsgAddFunction) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddFunction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddFunction proto.InternalMessageInfo

// MsgAddFunctionResponse defines the Msg/AddFunction response type.
type MsgAddFunctionResponse struct {
}

func (m *MsgAddFunctionResponse) Reset()         { *m = MsgAddFunctionResponse{} }
func (m *MsgAddFunctionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddFunctionResponse) ProtoMessage()    {}
func (*MsgAddFunctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca54b1c07b1b0571, []int{9}
}
func (m *MsgAddFunctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddFunctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddFunctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddFunctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddFunctionResponse.Merge(m, src)
}
func (m *MsgAddFunctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddFunctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddFunctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddFunctionResponse proto.InternalMessageInfo

// MsgDeleteFunction defines the Msg/DeleteFunction request type.
type MsgDeleteFunction struct {
	Role     ddc.Role     `protobuf:"varint,1,opt,name=role,proto3,enum=bianjieai.ddc.Role" json:"role,omitempty"`
	Protocol ddc.Protocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=bianjieai.ddc.Protocol" json:"protocol,omitempty"`
	Denom    string       `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Function ddc.Function `protobuf:"varint,4,opt,name=function,proto3,enum=bianjieai.ddc.Function" json:"function,omitempty"`
	Operator string       `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *MsgDeleteFunction) Reset()         { *m = MsgDeleteFunction{} }
func (m *MsgDeleteFunction) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteFunction) ProtoMessage()    {}
func (*MsgDeleteFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca54b1c07b1b0571, []int{10}
}
func (m *MsgDeleteFunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteFunction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteFunction.Merge(m, src)
}
func (m *MsgDeleteFunction) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteFunction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteFunction proto.InternalMessageInfo

// MsgDeleteFunctionResponse defines the Msg/DeleteFunction response type.
type MsgDeleteFunctionResponse struct {
}

func (m *MsgDeleteFunctionResponse) Reset()         { *m = MsgDeleteFunctionResponse{} }
func (m *MsgDeleteFunctionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteFunctionResponse) ProtoMessage()    {}
func (*MsgDeleteFunctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca54b1c07b1b0571, []int{11}
}
func (m *MsgDeleteFunctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteFunctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteFunctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteFunctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteFunctionResponse.Merge(m, src)
}
func (m *MsgDeleteFunctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteFunctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteFunctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteFunctionResponse proto.InternalMessageInfo

// MsgApproveCrossPlatform defines the Msg/ApproveCrossPlatform request type.
type MsgApproveCrossPlatform struct {
	From     string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To       string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Approved bool   `protobuf:"varint,3,opt,name=approved,proto3" json:"approved,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *MsgApproveCrossPlatform) Reset()         { *m = MsgApproveCrossPlatform{} }
func (m *MsgApproveCrossPlatform) String() string { return proto.CompactTextString(m) }
func (*MsgApproveCrossPlatform) ProtoMessage()    {}
func (*MsgApproveCrossPlatform) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca54b1c07b1b0571, []int{12}
}
func (m *MsgApproveCrossPlatform) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveCrossPlatform) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveCrossPlatform.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveCrossPlatform) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveCrossPlatform.Merge(m, src)
}
func (m *MsgApproveCrossPlatform) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveCrossPlatform) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveCrossPlatform.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveCrossPlatform proto.InternalMessageInfo

// MsgApproveCrossPlatformResponse defines the Msg/ApproveCrossPlatform response type.
type MsgApproveCrossPlatformResponse struct {
}

func (m *MsgApproveCrossPlatformResponse) Reset()         { *m = MsgApproveCrossPlatformResponse{} }
func (m *MsgApproveCrossPlatformResponse) String() string { return proto.CompactTextString(m) }
func (*MsgApproveCrossPlatformResponse) ProtoMessage()    {}
func (*MsgApproveCrossPlatformResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca54b1c07b1b0571, []int{13}
}
func (m *MsgApproveCrossPlatformResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveCrossPlatformResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveCrossPlatformResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveCrossPlatformResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveCrossPlatformResponse.Merge(m, src)
}
func (m *MsgApproveCrossPlatformResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveCrossPlatformResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveCrossPlatformResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveCrossPlatformResponse proto.InternalMessageInfo

// MsgSyncPlatformDID defines the Msg/SyncPlatformDID request type.
type MsgSyncPlatformDID struct {
	DIDs     []string `protobuf:"bytes,1,rep,name=dids,proto3" json:"dids,omitempty"`
	Operator string   `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *MsgSyncPlatformDID) Reset()         { *m = MsgSyncPlatformDID{} }
func (m *MsgSyncPlatformDID) String() string { return proto.CompactTextString(m) }
func (*MsgSyncPlatformDID) ProtoMessage()    {}
func (*MsgSyncPlatformDID) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca54b1c07b1b0571, []int{14}
}
func (m *MsgSyncPlatformDID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSyncPlatformDID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSyncPlatformDID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSyncPlatformDID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSyncPlatformDID.Merge(m, src)
}
func (m *MsgSyncPlatformDID) XXX_Size() int {
	return m.Size()
}
func (m *MsgSyncPlatformDID) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSyncPlatformDID.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSyncPlatformDID proto.InternalMessageInfo

// MsgSyncPlatformDIDResponse defines the Msg/SyncPlatformDID response type.
type MsgSyncPlatformDIDResponse struct {
}

func (m *MsgSyncPlatformDIDResponse) Reset()         { *m = MsgSyncPlatformDIDResponse{} }
func (m *MsgSyncPlatformDIDResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSyncPlatformDIDResponse) ProtoMessage()    {}
func (*MsgSyncPlatformDIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca54b1c07b1b0571, []int{15}
}
func (m *MsgSyncPlatformDIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSyncPlatformDIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSyncPlatformDIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSyncPlatformDIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSyncPlatformDIDResponse.Merge(m, src)
}
func (m *MsgSyncPlatformDIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSyncPlatformDIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSyncPlatformDIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSyncPlatformDIDResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddAccount)(nil), "bianjieai.ddc.auth.MsgAddAccount")
	proto.RegisterType((*MsgAddAccountResponse)(nil), "bianjieai.ddc.auth.MsgAddAccountResponse")
	proto.RegisterType((*MsgAddBatchAccount)(nil), "bianjieai.ddc.auth.MsgAddBatchAccount")
	proto.RegisterType((*MsgAddBatchAccountResponse)(nil), "bianjieai.ddc.auth.MsgAddBatchAccountResponse")
	proto.RegisterType((*MsgUpdateAccountState)(nil), "bianjieai.ddc.auth.MsgUpdateAccountState")
	proto.RegisterType((*MsgUpdateAccountStateResponse)(nil), "bianjieai.ddc.auth.MsgUpdateAccountStateResponse")
	proto.RegisterType((*MsgDeleteAccount)(nil), "bianjieai.ddc.auth.MsgDeleteAccount")
	proto.RegisterType((*MsgDeleteAccountResponse)(nil), "bianjieai.ddc.auth.MsgDeleteAccountResponse")
	proto.RegisterType((*MsgAddFunction)(nil), "bianjieai.ddc.auth.MsgAddFunction")
	proto.RegisterType((*MsgAddFunctionResponse)(nil), "bianjieai.ddc.auth.MsgAddFunctionResponse")
	proto.RegisterType((*MsgDeleteFunction)(nil), "bianjieai.ddc.auth.MsgDeleteFunction")
	proto.RegisterType((*MsgDeleteFunctionResponse)(nil), "bianjieai.ddc.auth.MsgDeleteFunctionResponse")
	proto.RegisterType((*MsgApproveCrossPlatform)(nil), "bianjieai.ddc.auth.MsgApproveCrossPlatform")
	proto.RegisterType((*MsgApproveCrossPlatformResponse)(nil), "bianjieai.ddc.auth.MsgApproveCrossPlatformResponse")
	proto.RegisterType((*MsgSyncPlatformDID)(nil), "bianjieai.ddc.auth.MsgSyncPlatformDID")
	proto.RegisterType((*MsgSyncPlatformDIDResponse)(nil), "bianjieai.ddc.auth.MsgSyncPlatformDIDResponse")
}

func init() { proto.RegisterFile("ddc/auth/tx.proto", fileDescriptor_ca54b1c07b1b0571) }

var fileDescriptor_ca54b1c07b1b0571 = []byte{
	// 784 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0x8e, 0x93, 0x34, 0x7f, 0x3a, 0xbf, 0x92, 0xbf, 0xdd, 0xa6, 0xad, 0x7f, 0x53, 0x92, 0x36,
	0x2a, 0x50, 0x4a, 0xeb, 0x88, 0xf4, 0xc6, 0x01, 0xa9, 0xc1, 0x42, 0xaa, 0x44, 0x51, 0xe5, 0x0a,
	0x09, 0x55, 0x42, 0x95, 0xeb, 0xdd, 0x38, 0x46, 0x89, 0x37, 0xb2, 0x1d, 0x54, 0x4e, 0x5c, 0x39,
	0xf2, 0x08, 0x7d, 0x07, 0x5e, 0xa2, 0x17, 0xa4, 0x72, 0xe3, 0x54, 0x50, 0x7a, 0xe1, 0x31, 0xd0,
	0xae, 0xed, 0x6d, 0xec, 0xc4, 0x6d, 0xb8, 0x70, 0xe0, 0xb6, 0xbb, 0xf3, 0xed, 0x7c, 0xf3, 0xcd,
	0xce, 0x8c, 0x0d, 0xf3, 0x18, 0x9b, 0x0d, 0x63, 0xe0, 0x77, 0x1a, 0xfe, 0xa9, 0xda, 0x77, 0xa9,
	0x4f, 0x11, 0x3a, 0xb1, 0x0d, 0xe7, 0xad, 0x4d, 0x0c, 0x5b, 0xc5, 0xd8, 0x54, 0x99, 0x51, 0xa9,
	0x58, 0xd4, 0xa2, 0xdc, 0xdc, 0x60, 0xab, 0x00, 0xa9, 0x94, 0xd8, 0x65, 0x86, 0xe1, 0xdb, 0xfa,
	0xb9, 0x04, 0xa5, 0x7d, 0xcf, 0xda, 0xc5, 0x78, 0xd7, 0x34, 0xe9, 0xc0, 0xf1, 0x91, 0x0c, 0xff,
	0x18, 0x18, 0xbb, 0xc4, 0xf3, 0x64, 0x69, 0x55, 0xda, 0x98, 0xd5, 0xa3, 0x2d, 0x9a, 0x83, 0x1c,
	0xb6, 0xb1, 0x9c, 0xe5, 0xa7, 0x6c, 0x89, 0x10, 0xe4, 0x1d, 0xa3, 0x47, 0xe4, 0x1c, 0x3f, 0xe2,
	0x6b, 0xf4, 0x00, 0xf2, 0x2e, 0xed, 0x12, 0x39, 0xbf, 0x2a, 0x6d, 0x94, 0x9b, 0x0b, 0x6a, 0x3c,
	0x32, 0x9d, 0x76, 0x89, 0xce, 0x01, 0x68, 0x0b, 0xa0, 0x4b, 0x0c, 0x4c, 0xdc, 0x63, 0xe6, 0x75,
	0x86, 0xb9, 0x68, 0x95, 0x86, 0x97, 0xb5, 0xd9, 0x17, 0xfc, 0x54, 0xdb, 0xd3, 0xf4, 0xd9, 0x00,
	0xa0, 0xd9, 0x18, 0x2d, 0x41, 0xc1, 0x23, 0x0e, 0x26, 0xae, 0x5c, 0xe0, 0x64, 0xe1, 0xee, 0x49,
	0xf1, 0xe3, 0x59, 0x2d, 0xf3, 0xf3, 0xac, 0x96, 0xa9, 0x2f, 0xc3, 0x62, 0x4c, 0x89, 0x4e, 0xbc,
	0x3e, 0x75, 0x3c, 0x52, 0xff, 0x22, 0x01, 0x0a, 0x2c, 0x2d, 0xc3, 0x37, 0x3b, 0x13, 0x85, 0xe6,
	0x26, 0x0a, 0xcd, 0x8d, 0x0b, 0xcd, 0x4d, 0x10, 0x9a, 0xfb, 0xb3, 0x42, 0x57, 0x40, 0x19, 0x97,
	0x23, 0xd4, 0x7e, 0x96, 0x78, 0x1e, 0x5e, 0xf5, 0xb1, 0xe1, 0x93, 0xd0, 0x78, 0xe8, 0x1b, 0x3e,
	0xb9, 0xe1, 0x65, 0x37, 0x61, 0xc6, 0x63, 0x10, 0xfe, 0xb6, 0xe5, 0x66, 0x25, 0xa1, 0x85, 0x5f,
	0xd7, 0x03, 0x08, 0x6a, 0xc2, 0xa2, 0xd9, 0x31, 0x1c, 0x8b, 0x1c, 0xf7, 0xbb, 0x86, 0xdf, 0xa6,
	0x6e, 0xef, 0x38, 0xb8, 0xcb, 0x8a, 0xa0, 0xa8, 0x2f, 0x04, 0xc6, 0x83, 0xd0, 0x16, 0x30, 0x5f,
	0x6b, 0xca, 0xa7, 0x68, 0xaa, 0xc1, 0xdd, 0x89, 0x41, 0x0b, 0x59, 0x2f, 0x61, 0x6e, 0xdf, 0xb3,
	0x34, 0xd2, 0x25, 0x02, 0x70, 0x83, 0xa0, 0x6b, 0xc2, 0x6c, 0x0a, 0xa1, 0x02, 0x72, 0xd2, 0x9f,
	0xe0, 0xfa, 0x2e, 0x41, 0x39, 0xc8, 0xf0, 0xf3, 0x81, 0x63, 0xfa, 0x36, 0x75, 0xc4, 0x63, 0x4b,
	0xb7, 0x55, 0xf5, 0x0e, 0x14, 0x79, 0x67, 0x99, 0xb4, 0x1b, 0x66, 0x73, 0x39, 0x01, 0x3e, 0x08,
	0xcd, 0xba, 0x00, 0xa2, 0x0a, 0xcc, 0x60, 0xe2, 0xd0, 0x5e, 0xd8, 0x48, 0xc1, 0x86, 0xb9, 0x6a,
	0x87, 0xfc, 0x61, 0x37, 0x25, 0x5d, 0x45, 0xe1, 0xe9, 0x02, 0x88, 0x14, 0x28, 0xd2, 0x3e, 0x71,
	0x0d, 0x9f, 0xba, 0x41, 0xa9, 0xe9, 0x62, 0x3f, 0xa2, 0x5e, 0x86, 0xa5, 0xb8, 0x40, 0xa1, 0x7d,
	0x28, 0xc1, 0xbc, 0x48, 0xcc, 0xdf, 0x2a, 0xff, 0x0e, 0xfc, 0x3f, 0xa6, 0x51, 0x64, 0xe0, 0x03,
	0x2c, 0xb3, 0xdc, 0xf4, 0xfb, 0x2e, 0x7d, 0x47, 0x9e, 0xb9, 0xd4, 0xf3, 0xa2, 0x62, 0x66, 0x63,
	0xa0, 0xed, 0xd2, 0x5e, 0x58, 0x6d, 0x7c, 0x8d, 0xca, 0x90, 0xf5, 0x69, 0x58, 0x66, 0x59, 0x9f,
	0xb2, 0x08, 0x8c, 0xe0, 0x2e, 0x0e, 0x5b, 0x42, 0xec, 0x63, 0xd1, 0xe5, 0x53, 0xa3, 0x5b, 0x83,
	0x5a, 0x4a, 0x00, 0x22, 0xc6, 0xd7, 0x7c, 0xa2, 0x1d, 0xbe, 0x77, 0xcc, 0xc8, 0xa4, 0xed, 0x69,
	0x68, 0x05, 0xf2, 0xd8, 0xc6, 0xe1, 0x38, 0x6b, 0x15, 0x87, 0x97, 0xb5, 0xbc, 0xb6, 0xa7, 0x79,
	0x3a, 0x3f, 0x8d, 0x91, 0x67, 0x53, 0xc9, 0x83, 0xe1, 0x92, 0xf0, 0x1c, 0xf1, 0x36, 0xbf, 0x16,
	0x20, 0xb7, 0xef, 0x59, 0xe8, 0x08, 0x60, 0xe4, 0x93, 0xb1, 0xa6, 0x8e, 0x7f, 0x7e, 0xd4, 0xd8,
	0x2c, 0x56, 0x1e, 0xde, 0x0a, 0x89, 0x38, 0x90, 0x0d, 0xff, 0x25, 0x47, 0xf5, 0xfd, 0xf4, 0xdb,
	0xa3, 0x38, 0x45, 0x9d, 0x0e, 0x27, 0xa8, 0x5c, 0x40, 0x13, 0xe6, 0x64, 0x5a, 0xac, 0xe3, 0x50,
	0xe5, 0xf1, 0xd4, 0x50, 0xc1, 0x69, 0x42, 0x29, 0x3e, 0xc5, 0xd6, 0x53, 0x7c, 0xc4, 0x50, 0xca,
	0xd6, 0x34, 0x28, 0x41, 0xf2, 0x06, 0xfe, 0x1d, 0x9d, 0x5e, 0xf5, 0xf4, 0xbc, 0x44, 0x18, 0x65,
	0xf3, 0x76, 0x8c, 0x70, 0xdf, 0x86, 0x72, 0x62, 0x40, 0xdc, 0xbb, 0x31, 0x3c, 0x41, 0xb2, 0x3d,
	0x15, 0x4c, 0xf0, 0x9c, 0x42, 0x65, 0x62, 0x1f, 0x3e, 0x4a, 0x8b, 0x75, 0x02, 0x58, 0xd9, 0xf9,
	0x0d, 0xf0, 0x68, 0x11, 0x26, 0xbb, 0x2b, 0xad, 0x08, 0x13, 0xb8, 0xd4, 0x22, 0x4c, 0xe9, 0xa9,
	0xd6, 0xd3, 0xf3, 0x61, 0x55, 0xba, 0x18, 0x56, 0xa5, 0x1f, 0xc3, 0xaa, 0xf4, 0xe9, 0xaa, 0x9a,
	0xb9, 0xb8, 0xaa, 0x66, 0xbe, 0x5d, 0x55, 0x33, 0x47, 0xeb, 0x96, 0xed, 0x77, 0x06, 0x27, 0xaa,
	0x49, 0x7b, 0x0d, 0xe1, 0x93, 0xfd, 0xbc, 0x6d, 0x5b, 0xb4, 0x11, 0xfd, 0x04, 0x9e, 0x14, 0xf8,
	0x1c, 0xdd, 0xf9, 0x15, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x51, 0xca, 0x79, 0x17, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// AddAccount defines a method for creating a account.
	AddAccount(ctx context.Context, in *MsgAddAccount, opts ...grpc.CallOption) (*MsgAddAccountResponse, error)
	// AddBatchAccount defines a method for creating a batch of account.
	AddBatchAccount(ctx context.Context, in *MsgAddBatchAccount, opts ...grpc.CallOption) (*MsgAddBatchAccountResponse, error)
	// UpdateAccountState defines a method for updating account state
	UpdateAccountState(ctx context.Context, in *MsgUpdateAccountState, opts ...grpc.CallOption) (*MsgUpdateAccountStateResponse, error)
	// DeleteAccount defines a method for deleting account
	DeleteAccount(ctx context.Context, in *MsgDeleteAccount, opts ...grpc.CallOption) (*MsgDeleteAccountResponse, error)
	// AddFunction defines a method for granting account to call some function
	AddFunction(ctx context.Context, in *MsgAddFunction, opts ...grpc.CallOption) (*MsgAddFunctionResponse, error)
	// DeleteFunction defines a method for revoking account
	DeleteFunction(ctx context.Context, in *MsgDeleteFunction, opts ...grpc.CallOption) (*MsgDeleteFunctionResponse, error)
	// ApproveCrossPlatform defines a method for approving account cross platform
	ApproveCrossPlatform(ctx context.Context, in *MsgApproveCrossPlatform, opts ...grpc.CallOption) (*MsgApproveCrossPlatformResponse, error)
	// SyncPlatformDID defines a method for syncing did to a new platform
	SyncPlatformDID(ctx context.Context, in *MsgSyncPlatformDID, opts ...grpc.CallOption) (*MsgSyncPlatformDIDResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddAccount(ctx context.Context, in *MsgAddAccount, opts ...grpc.CallOption) (*MsgAddAccountResponse, error) {
	out := new(MsgAddAccountResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.auth.Msg/AddAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddBatchAccount(ctx context.Context, in *MsgAddBatchAccount, opts ...grpc.CallOption) (*MsgAddBatchAccountResponse, error) {
	out := new(MsgAddBatchAccountResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.auth.Msg/AddBatchAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAccountState(ctx context.Context, in *MsgUpdateAccountState, opts ...grpc.CallOption) (*MsgUpdateAccountStateResponse, error) {
	out := new(MsgUpdateAccountStateResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.auth.Msg/UpdateAccountState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteAccount(ctx context.Context, in *MsgDeleteAccount, opts ...grpc.CallOption) (*MsgDeleteAccountResponse, error) {
	out := new(MsgDeleteAccountResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.auth.Msg/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddFunction(ctx context.Context, in *MsgAddFunction, opts ...grpc.CallOption) (*MsgAddFunctionResponse, error) {
	out := new(MsgAddFunctionResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.auth.Msg/AddFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteFunction(ctx context.Context, in *MsgDeleteFunction, opts ...grpc.CallOption) (*MsgDeleteFunctionResponse, error) {
	out := new(MsgDeleteFunctionResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.auth.Msg/DeleteFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveCrossPlatform(ctx context.Context, in *MsgApproveCrossPlatform, opts ...grpc.CallOption) (*MsgApproveCrossPlatformResponse, error) {
	out := new(MsgApproveCrossPlatformResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.auth.Msg/ApproveCrossPlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SyncPlatformDID(ctx context.Context, in *MsgSyncPlatformDID, opts ...grpc.CallOption) (*MsgSyncPlatformDIDResponse, error) {
	out := new(MsgSyncPlatformDIDResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.auth.Msg/SyncPlatformDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// AddAccount defines a method for creating a account.
	AddAccount(context.Context, *MsgAddAccount) (*MsgAddAccountResponse, error)
	// AddBatchAccount defines a method for creating a batch of account.
	AddBatchAccount(context.Context, *MsgAddBatchAccount) (*MsgAddBatchAccountResponse, error)
	// UpdateAccountState defines a method for updating account state
	UpdateAccountState(context.Context, *MsgUpdateAccountState) (*MsgUpdateAccountStateResponse, error)
	// DeleteAccount defines a method for deleting account
	DeleteAccount(context.Context, *MsgDeleteAccount) (*MsgDeleteAccountResponse, error)
	// AddFunction defines a method for granting account to call some function
	AddFunction(context.Context, *MsgAddFunction) (*MsgAddFunctionResponse, error)
	// DeleteFunction defines a method for revoking account
	DeleteFunction(context.Context, *MsgDeleteFunction) (*MsgDeleteFunctionResponse, error)
	// ApproveCrossPlatform defines a method for approving account cross platform
	ApproveCrossPlatform(context.Context, *MsgApproveCrossPlatform) (*MsgApproveCrossPlatformResponse, error)
	// SyncPlatformDID defines a method for syncing did to a new platform
	SyncPlatformDID(context.Context, *MsgSyncPlatformDID) (*MsgSyncPlatformDIDResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddAccount(ctx context.Context, req *MsgAddAccount) (*MsgAddAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (*UnimplementedMsgServer) AddBatchAccount(ctx context.Context, req *MsgAddBatchAccount) (*MsgAddBatchAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBatchAccount not implemented")
}
func (*UnimplementedMsgServer) UpdateAccountState(ctx context.Context, req *MsgUpdateAccountState) (*MsgUpdateAccountStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountState not implemented")
}
func (*UnimplementedMsgServer) DeleteAccount(ctx context.Context, req *MsgDeleteAccount) (*MsgDeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (*UnimplementedMsgServer) AddFunction(ctx context.Context, req *MsgAddFunction) (*MsgAddFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFunction not implemented")
}
func (*UnimplementedMsgServer) DeleteFunction(ctx context.Context, req *MsgDeleteFunction) (*MsgDeleteFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFunction not implemented")
}
func (*UnimplementedMsgServer) ApproveCrossPlatform(ctx context.Context, req *MsgApproveCrossPlatform) (*MsgApproveCrossPlatformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveCrossPlatform not implemented")
}
func (*UnimplementedMsgServer) SyncPlatformDID(ctx context.Context, req *MsgSyncPlatformDID) (*MsgSyncPlatformDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncPlatformDID not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.auth.Msg/AddAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAccount(ctx, req.(*MsgAddAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddBatchAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddBatchAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddBatchAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.auth.Msg/AddBatchAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddBatchAccount(ctx, req.(*MsgAddBatchAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAccountState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.auth.Msg/UpdateAccountState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAccountState(ctx, req.(*MsgUpdateAccountState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.auth.Msg/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteAccount(ctx, req.(*MsgDeleteAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddFunction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.auth.Msg/AddFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddFunction(ctx, req.(*MsgAddFunction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteFunction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.auth.Msg/DeleteFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteFunction(ctx, req.(*MsgDeleteFunction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveCrossPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveCrossPlatform)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveCrossPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.auth.Msg/ApproveCrossPlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveCrossPlatform(ctx, req.(*MsgApproveCrossPlatform))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SyncPlatformDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSyncPlatformDID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SyncPlatformDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.auth.Msg/SyncPlatformDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SyncPlatformDID(ctx, req.(*MsgSyncPlatformDID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bianjieai.ddc.auth.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAccount",
			Handler:    _Msg_AddAccount_Handler,
		},
		{
			MethodName: "AddBatchAccount",
			Handler:    _Msg_AddBatchAccount_Handler,
		},
		{
			MethodName: "UpdateAccountState",
			Handler:    _Msg_UpdateAccountState_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _Msg_DeleteAccount_Handler,
		},
		{
			MethodName: "AddFunction",
			Handler:    _Msg_AddFunction_Handler,
		},
		{
			MethodName: "DeleteFunction",
			Handler:    _Msg_DeleteFunction_Handler,
		},
		{
			MethodName: "ApproveCrossPlatform",
			Handler:    _Msg_ApproveCrossPlatform_Handler,
		},
		{
			MethodName: "SyncPlatformDID",
			Handler:    _Msg_SyncPlatformDID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ddc/auth/tx.proto",
}

func (m *MsgAddAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LeaderDID) > 0 {
		i -= len(m.LeaderDID)
		copy(dAtA[i:], m.LeaderDID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LeaderDID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Role != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddBatchAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddBatchAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddBatchAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LeaderDID) > 0 {
		i -= len(m.LeaderDID)
		copy(dAtA[i:], m.LeaderDID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LeaderDID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Role) > 0 {
		dAtA2 := make([]byte, len(m.Role)*10)
		var j1 int
		for _, num := range m.Role {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTx(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		for iNdEx := len(m.Name) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Name[iNdEx])
			copy(dAtA[i:], m.Name[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Name[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Did) > 0 {
		for iNdEx := len(m.Did) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Did[iNdEx])
			copy(dAtA[i:], m.Did[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Did[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		for iNdEx := len(m.Address) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Address[iNdEx])
			copy(dAtA[i:], m.Address[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Address[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddBatchAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddBatchAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddBatchAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAccountState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAccountState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAccountState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChangePlatformState {
		i--
		if m.ChangePlatformState {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.State != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAccountStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAccountStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAccountStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddFunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddFunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Function != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Function))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Protocol != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x10
	}
	if m.Role != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddFunctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddFunctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddFunctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteFunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteFunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Function != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Function))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Protocol != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x10
	}
	if m.Role != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteFunctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteFunctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteFunctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgApproveCrossPlatform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveCrossPlatform) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveCrossPlatform) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x22
	}
	if m.Approved {
		i--
		if m.Approved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApproveCrossPlatformResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveCrossPlatformResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveCrossPlatformResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSyncPlatformDID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSyncPlatformDID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSyncPlatformDID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DIDs) > 0 {
		for iNdEx := len(m.DIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DIDs[iNdEx])
			copy(dAtA[i:], m.DIDs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.DIDs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgSyncPlatformDIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSyncPlatformDIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSyncPlatformDIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovTx(uint64(m.Role))
	}
	l = len(m.LeaderDID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddBatchAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Address) > 0 {
		for _, s := range m.Address {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Did) > 0 {
		for _, s := range m.Did {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Role) > 0 {
		l = 0
		for _, e := range m.Role {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	l = len(m.LeaderDID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddBatchAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAccountState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovTx(uint64(m.State))
	}
	if m.ChangePlatformState {
		n += 2
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateAccountStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddFunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != 0 {
		n += 1 + sovTx(uint64(m.Role))
	}
	if m.Protocol != 0 {
		n += 1 + sovTx(uint64(m.Protocol))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Function != 0 {
		n += 1 + sovTx(uint64(m.Function))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddFunctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteFunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != 0 {
		n += 1 + sovTx(uint64(m.Role))
	}
	if m.Protocol != 0 {
		n += 1 + sovTx(uint64(m.Protocol))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Function != 0 {
		n += 1 + sovTx(uint64(m.Function))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteFunctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgApproveCrossPlatform) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Approved {
		n += 2
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgApproveCrossPlatformResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSyncPlatformDID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DIDs) > 0 {
		for _, s := range m.DIDs {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSyncPlatformDIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= ddc.Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderDID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderDID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddBatchAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddBatchAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddBatchAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = append(m.Did, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v ddc.Role
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ddc.Role(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Role = append(m.Role, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Role) == 0 {
					m.Role = make([]ddc.Role, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ddc.Role
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ddc.Role(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Role = append(m.Role, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderDID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderDID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddBatchAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddBatchAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddBatchAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAccountState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAccountState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAccountState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ddc.State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePlatformState", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangePlatformState = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAccountStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAccountStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAccountStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddFunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddFunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddFunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= ddc.Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= ddc.Protocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			m.Function = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Function |= ddc.Function(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddFunctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddFunctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddFunctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteFunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteFunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteFunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= ddc.Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= ddc.Protocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			m.Function = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Function |= ddc.Function(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteFunctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteFunctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteFunctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveCrossPlatform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveCrossPlatform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveCrossPlatform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Approved = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveCrossPlatformResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveCrossPlatformResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveCrossPlatformResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSyncPlatformDID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSyncPlatformDID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSyncPlatformDID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DIDs = append(m.DIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSyncPlatformDIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSyncPlatformDIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSyncPlatformDIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
