// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ddc/auth/events.proto

package auth

import (
	fmt "fmt"
	core "github.com/bianjieai/ddc-go/ddc/core"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventAddAccount struct {
	Caller  string `protobuf:"bytes,1,opt,name=caller,proto3" json:"caller,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *EventAddAccount) Reset()         { *m = EventAddAccount{} }
func (m *EventAddAccount) String() string { return proto.CompactTextString(m) }
func (*EventAddAccount) ProtoMessage()    {}
func (*EventAddAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfaea97a718f095e, []int{0}
}
func (m *EventAddAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAddAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAddAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAddAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAddAccount.Merge(m, src)
}
func (m *EventAddAccount) XXX_Size() int {
	return m.Size()
}
func (m *EventAddAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAddAccount.DiscardUnknown(m)
}

var xxx_messageInfo_EventAddAccount proto.InternalMessageInfo

func (m *EventAddAccount) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

func (m *EventAddAccount) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type EventAddBatchAccount struct {
	Caller  string   `protobuf:"bytes,1,opt,name=caller,proto3" json:"caller,omitempty"`
	Address []string `protobuf:"bytes,2,rep,name=address,proto3" json:"address,omitempty"`
}

func (m *EventAddBatchAccount) Reset()         { *m = EventAddBatchAccount{} }
func (m *EventAddBatchAccount) String() string { return proto.CompactTextString(m) }
func (*EventAddBatchAccount) ProtoMessage()    {}
func (*EventAddBatchAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfaea97a718f095e, []int{1}
}
func (m *EventAddBatchAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAddBatchAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAddBatchAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAddBatchAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAddBatchAccount.Merge(m, src)
}
func (m *EventAddBatchAccount) XXX_Size() int {
	return m.Size()
}
func (m *EventAddBatchAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAddBatchAccount.DiscardUnknown(m)
}

var xxx_messageInfo_EventAddBatchAccount proto.InternalMessageInfo

func (m *EventAddBatchAccount) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

func (m *EventAddBatchAccount) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

type EventAddFunction struct {
	Operator string        `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Role     core.Role     `protobuf:"varint,2,opt,name=role,proto3,enum=bianjieai.ddc.Role" json:"role,omitempty"`
	Protocol core.Protocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=bianjieai.ddc.Protocol" json:"protocol,omitempty"`
	Denom    string        `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty"`
	Function core.Function `protobuf:"varint,5,opt,name=function,proto3,enum=bianjieai.ddc.Function" json:"function,omitempty"`
}

func (m *EventAddFunction) Reset()         { *m = EventAddFunction{} }
func (m *EventAddFunction) String() string { return proto.CompactTextString(m) }
func (*EventAddFunction) ProtoMessage()    {}
func (*EventAddFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfaea97a718f095e, []int{2}
}
func (m *EventAddFunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAddFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAddFunction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAddFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAddFunction.Merge(m, src)
}
func (m *EventAddFunction) XXX_Size() int {
	return m.Size()
}
func (m *EventAddFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAddFunction.DiscardUnknown(m)
}

var xxx_messageInfo_EventAddFunction proto.InternalMessageInfo

func (m *EventAddFunction) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *EventAddFunction) GetRole() core.Role {
	if m != nil {
		return m.Role
	}
	return core.Role_OPERATOR
}

func (m *EventAddFunction) GetProtocol() core.Protocol {
	if m != nil {
		return m.Protocol
	}
	return core.Protocol_NFT
}

func (m *EventAddFunction) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EventAddFunction) GetFunction() core.Function {
	if m != nil {
		return m.Function
	}
	return core.Function_MINT
}

type EventDeleteFunction struct {
	Operator string        `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Role     core.Role     `protobuf:"varint,2,opt,name=role,proto3,enum=bianjieai.ddc.Role" json:"role,omitempty"`
	Protocol core.Protocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=bianjieai.ddc.Protocol" json:"protocol,omitempty"`
	Denom    string        `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty"`
	Function core.Function `protobuf:"varint,5,opt,name=function,proto3,enum=bianjieai.ddc.Function" json:"function,omitempty"`
}

func (m *EventDeleteFunction) Reset()         { *m = EventDeleteFunction{} }
func (m *EventDeleteFunction) String() string { return proto.CompactTextString(m) }
func (*EventDeleteFunction) ProtoMessage()    {}
func (*EventDeleteFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfaea97a718f095e, []int{3}
}
func (m *EventDeleteFunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeleteFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeleteFunction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeleteFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeleteFunction.Merge(m, src)
}
func (m *EventDeleteFunction) XXX_Size() int {
	return m.Size()
}
func (m *EventDeleteFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeleteFunction.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeleteFunction proto.InternalMessageInfo

func (m *EventDeleteFunction) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *EventDeleteFunction) GetRole() core.Role {
	if m != nil {
		return m.Role
	}
	return core.Role_OPERATOR
}

func (m *EventDeleteFunction) GetProtocol() core.Protocol {
	if m != nil {
		return m.Protocol
	}
	return core.Protocol_NFT
}

func (m *EventDeleteFunction) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EventDeleteFunction) GetFunction() core.Function {
	if m != nil {
		return m.Function
	}
	return core.Function_MINT
}

type EventSetSwitcherStateOfPlatform struct {
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	IsOpen   bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (m *EventSetSwitcherStateOfPlatform) Reset()         { *m = EventSetSwitcherStateOfPlatform{} }
func (m *EventSetSwitcherStateOfPlatform) String() string { return proto.CompactTextString(m) }
func (*EventSetSwitcherStateOfPlatform) ProtoMessage()    {}
func (*EventSetSwitcherStateOfPlatform) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfaea97a718f095e, []int{4}
}
func (m *EventSetSwitcherStateOfPlatform) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSetSwitcherStateOfPlatform) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSetSwitcherStateOfPlatform.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSetSwitcherStateOfPlatform) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSetSwitcherStateOfPlatform.Merge(m, src)
}
func (m *EventSetSwitcherStateOfPlatform) XXX_Size() int {
	return m.Size()
}
func (m *EventSetSwitcherStateOfPlatform) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSetSwitcherStateOfPlatform.DiscardUnknown(m)
}

var xxx_messageInfo_EventSetSwitcherStateOfPlatform proto.InternalMessageInfo

func (m *EventSetSwitcherStateOfPlatform) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *EventSetSwitcherStateOfPlatform) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

type EventSyncPlatformDID struct {
	Address string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	DIDs    []string `protobuf:"bytes,2,rep,name=dids,proto3" json:"dids,omitempty"`
}

func (m *EventSyncPlatformDID) Reset()         { *m = EventSyncPlatformDID{} }
func (m *EventSyncPlatformDID) String() string { return proto.CompactTextString(m) }
func (*EventSyncPlatformDID) ProtoMessage()    {}
func (*EventSyncPlatformDID) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfaea97a718f095e, []int{5}
}
func (m *EventSyncPlatformDID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSyncPlatformDID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSyncPlatformDID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSyncPlatformDID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSyncPlatformDID.Merge(m, src)
}
func (m *EventSyncPlatformDID) XXX_Size() int {
	return m.Size()
}
func (m *EventSyncPlatformDID) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSyncPlatformDID.DiscardUnknown(m)
}

var xxx_messageInfo_EventSyncPlatformDID proto.InternalMessageInfo

func (m *EventSyncPlatformDID) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventSyncPlatformDID) GetDIDs() []string {
	if m != nil {
		return m.DIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*EventAddAccount)(nil), "bianjieai.ddc.auth.EventAddAccount")
	proto.RegisterType((*EventAddBatchAccount)(nil), "bianjieai.ddc.auth.EventAddBatchAccount")
	proto.RegisterType((*EventAddFunction)(nil), "bianjieai.ddc.auth.EventAddFunction")
	proto.RegisterType((*EventDeleteFunction)(nil), "bianjieai.ddc.auth.EventDeleteFunction")
	proto.RegisterType((*EventSetSwitcherStateOfPlatform)(nil), "bianjieai.ddc.auth.EventSetSwitcherStateOfPlatform")
	proto.RegisterType((*EventSyncPlatformDID)(nil), "bianjieai.ddc.auth.EventSyncPlatformDID")
}

func init() { proto.RegisterFile("ddc/auth/events.proto", fileDescriptor_dfaea97a718f095e) }

var fileDescriptor_dfaea97a718f095e = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x93, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xe3, 0x36, 0x4d, 0x83, 0x25, 0xfe, 0xc8, 0x0d, 0x74, 0x15, 0x55, 0xdb, 0x6a, 0x2f,
	0xc0, 0x81, 0x5d, 0x89, 0x3e, 0x41, 0xd3, 0x05, 0xd1, 0x0b, 0xad, 0x36, 0x12, 0x07, 0x2e, 0xc8,
	0xb1, 0x27, 0x1b, 0x23, 0xc7, 0xb3, 0xf2, 0x3a, 0x20, 0xde, 0x82, 0xc7, 0xe2, 0x98, 0x1b, 0x88,
	0x03, 0x42, 0xc9, 0x8b, 0x20, 0x7b, 0x77, 0x23, 0x40, 0x08, 0x71, 0xe6, 0xb4, 0xfb, 0x79, 0x3e,
	0xfd, 0x3c, 0x9f, 0x35, 0x43, 0xef, 0x4b, 0x29, 0x32, 0xbe, 0x72, 0x8b, 0x0c, 0xde, 0x81, 0x71,
	0x75, 0x5a, 0x59, 0x74, 0xc8, 0xd8, 0x4c, 0x71, 0xf3, 0x56, 0x01, 0x57, 0xa9, 0x94, 0x22, 0xf5,
	0x86, 0xf1, 0xa8, 0xc4, 0x12, 0x43, 0x39, 0xf3, 0x7f, 0x8d, 0x73, 0x7c, 0x52, 0x22, 0x96, 0x1a,
	0x32, 0x5e, 0xa9, 0x8c, 0x1b, 0x83, 0x8e, 0x3b, 0x85, 0xa6, 0xe5, 0x8c, 0x6f, 0x7b, 0xbc, 0x27,
	0x04, 0x99, 0x5c, 0xd2, 0xbb, 0xcf, 0xfc, 0x35, 0x17, 0x52, 0x5e, 0x08, 0x81, 0x2b, 0xe3, 0xd8,
	0x03, 0x3a, 0x10, 0x5c, 0x6b, 0xb0, 0x11, 0x39, 0x23, 0x8f, 0x6e, 0x15, 0xad, 0x62, 0x11, 0x3d,
	0xe4, 0x8d, 0x25, 0xda, 0x0b, 0x85, 0x4e, 0x26, 0x2f, 0xe8, 0xa8, 0x83, 0x4c, 0xb8, 0x13, 0x8b,
	0x7f, 0x21, 0x49, 0x69, 0xa1, 0xae, 0xa3, 0xbd, 0xb3, 0xfd, 0x40, 0x6a, 0x64, 0xf2, 0x99, 0xd0,
	0x7b, 0x1d, 0xea, 0xf9, 0xca, 0x08, 0xdf, 0x39, 0x1b, 0xd3, 0x21, 0x56, 0x60, 0xb9, 0xc3, 0x0e,
	0xb4, 0xd3, 0xec, 0x21, 0xed, 0x5b, 0xd4, 0x10, 0x3a, 0xba, 0xf3, 0xf4, 0x28, 0xfd, 0xf5, 0x95,
	0x0a, 0xd4, 0x50, 0x04, 0x03, 0x3b, 0xa7, 0xc3, 0x90, 0x58, 0xa0, 0x8e, 0xf6, 0x83, 0xf9, 0xf8,
	0x37, 0xf3, 0x4d, 0x5b, 0x2e, 0x76, 0x46, 0x36, 0xa2, 0x07, 0x12, 0x0c, 0x2e, 0xa3, 0x7e, 0xb8,
	0xb6, 0x11, 0x1e, 0x35, 0x6f, 0x7b, 0x8b, 0x0e, 0xfe, 0x88, 0xea, 0x5a, 0x2f, 0x76, 0xc6, 0xe4,
	0x2b, 0xa1, 0x47, 0x21, 0x59, 0x0e, 0x1a, 0x1c, 0xfc, 0x5f, 0xe1, 0x5e, 0xd1, 0xd3, 0x90, 0x6d,
	0x0a, 0x6e, 0xfa, 0x5e, 0x39, 0xb1, 0x00, 0x3b, 0x75, 0xdc, 0xc1, 0xf5, 0xfc, 0x46, 0x73, 0x37,
	0x47, 0xbb, 0xfc, 0x6b, 0xce, 0x63, 0x7a, 0xa8, 0xea, 0x37, 0x58, 0x81, 0x09, 0x51, 0x87, 0xc5,
	0x40, 0xd5, 0xd7, 0x15, 0x98, 0xe4, 0x65, 0x3b, 0x58, 0xd3, 0x0f, 0x46, 0x74, 0xa4, 0xfc, 0x2a,
	0xff, 0x79, 0x80, 0x48, 0x3b, 0x8a, 0x8d, 0x64, 0x27, 0xb4, 0x2f, 0x95, 0x6c, 0xe7, 0x6a, 0x32,
	0xdc, 0x7c, 0x3b, 0xed, 0xe7, 0x57, 0x79, 0x5d, 0x84, 0xd3, 0xc9, 0xe5, 0xa7, 0x4d, 0x4c, 0xd6,
	0x9b, 0x98, 0x7c, 0xdf, 0xc4, 0xe4, 0xe3, 0x36, 0xee, 0xad, 0xb7, 0x71, 0xef, 0xcb, 0x36, 0xee,
	0xbd, 0x7e, 0x5c, 0x2a, 0xb7, 0x58, 0xcd, 0x52, 0x81, 0xcb, 0x6c, 0x17, 0xd7, 0xef, 0xc9, 0x93,
	0x12, 0xfd, 0x27, 0x13, 0x68, 0x21, 0xac, 0xe5, 0x6c, 0x10, 0x5e, 0xf0, 0xfc, 0x47, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xed, 0x79, 0x9d, 0x1a, 0xa9, 0x03, 0x00, 0x00,
}

func (m *EventAddAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAddAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAddAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAddBatchAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAddBatchAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAddBatchAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		for iNdEx := len(m.Address) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Address[iNdEx])
			copy(dAtA[i:], m.Address[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.Address[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAddFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAddFunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAddFunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Function != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Function))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if m.Protocol != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x18
	}
	if m.Role != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDeleteFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeleteFunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeleteFunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Function != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Function))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if m.Protocol != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x18
	}
	if m.Role != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSetSwitcherStateOfPlatform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSetSwitcherStateOfPlatform) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSetSwitcherStateOfPlatform) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsOpen {
		i--
		if m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSyncPlatformDID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSyncPlatformDID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSyncPlatformDID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DIDs) > 0 {
		for iNdEx := len(m.DIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DIDs[iNdEx])
			copy(dAtA[i:], m.DIDs[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.DIDs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventAddAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventAddBatchAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Address) > 0 {
		for _, s := range m.Address {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventAddFunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovEvents(uint64(m.Role))
	}
	if m.Protocol != 0 {
		n += 1 + sovEvents(uint64(m.Protocol))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Function != 0 {
		n += 1 + sovEvents(uint64(m.Function))
	}
	return n
}

func (m *EventDeleteFunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovEvents(uint64(m.Role))
	}
	if m.Protocol != 0 {
		n += 1 + sovEvents(uint64(m.Protocol))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Function != 0 {
		n += 1 + sovEvents(uint64(m.Function))
	}
	return n
}

func (m *EventSetSwitcherStateOfPlatform) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.IsOpen {
		n += 2
	}
	return n
}

func (m *EventSyncPlatformDID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.DIDs) > 0 {
		for _, s := range m.DIDs {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventAddAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAddAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAddAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAddBatchAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAddBatchAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAddBatchAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAddFunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAddFunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAddFunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= core.Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= core.Protocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			m.Function = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Function |= core.Function(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeleteFunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeleteFunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeleteFunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= core.Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= core.Protocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			m.Function = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Function |= core.Function(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSetSwitcherStateOfPlatform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSetSwitcherStateOfPlatform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSetSwitcherStateOfPlatform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSyncPlatformDID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSyncPlatformDID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSyncPlatformDID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DIDs = append(m.DIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
